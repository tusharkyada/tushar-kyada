<link rel="stylesheet" href="{{ 'common.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'product-grid-with-popup.css' | asset_url }}">

{% style %}
  .section-padding-{{ section.id }} {
      padding-top: {{ section.settings.section-padding-top }}px;
      padding-bottom: {{ section.settings.section-padding-bottom }}px;
  }
  @media and screen (max-width: 768px) {
      .section-padding-{{ section.id }} {
          padding-top: {{ section.settings.section-padding-top | times: 0.8 }}px;
          padding-bottom: {{ section.settings.section-padding-bottom | times: 0.8 }}px;
      }
  }
{% endstyle %}

<section
  class="product-grid-popup-container position-relative container section-padding-{{ section.id }}"
  {{ section.shopify_attributes }}
>
  {% if section.settings.heading != blank %}
    <div class="product-grid-header">
      <h2 class="section-title h2">{{ section.settings.heading }}</h2>
    </div>
  {% endif %}

  <div class="product-grid d-grid" style="--columns-mobile: {{ section.settings.columns_mobile }};">
    {% for block in section.blocks %}
      {% liquid
        assign product = block.settings.product
        assign current_product_index = forloop.index0
      %}
      <div class="product-item position-relative overflow-hidden" data-product-index="{{ current_product_index }}">
        <div class="product-image-wrapper  position-relative overflow-hidden">
          {% if product != blank and product.featured_image %}
            <img
              src="{{ product.featured_image | image_url: width: 500 }}"
              alt="{{ product.featured_image.alt | escape }}"
              class="product-image-{{ section.id }} product-image position-absolute"
              loading="lazy"
              width=""
              height=""
            >
          {% else %}
            <div class="product-placeholder position-absolute d-flex align-items-center justify-content-center">
              {{ 'product-apparel-1' | placeholder_svg_tag }}
            </div>
          {% endif %}
          <div
            class="product-icon position-absolute d-flex align-items-center justify-content-center"
            style="--X-position: {{ block.settings.x-position }}%; --Y-position: {{ block.settings.y-position }}%;"
          >
            <svg width="11" height="11" viewBox="0 0 11 11" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M5.3457 1.04175V9.50329" stroke="black" stroke-width="1.5" stroke-linecap="square" stroke-linejoin="round"/>
              <path d="M1.11523 5.27246H9.57677" stroke="black" stroke-width="1.5" stroke-linecap="square" stroke-linejoin="round"/>
            </svg>
          </div>
        </div>
      </div>
    {% endfor %}
  </div>

  <div class="product-popup-{{ section.id }} product-popup  d-flex align-items-center justify-content-center">
    <div class="popup-content position-relative">
      <button
        class="popup-close position-absolute d-flex align-items-center justify-content-center"
        aria-label="Close"
      >
        âœ•
      </button>
      <div class="popup-grid d-grid align-items-start">
        <div class="popup-image-wrapper position-relative overflow-hidden">
          <img
            src=""
            alt=""
            class="popup-image position-absolute w-100 h-100"
            loading="lazy"
            width=""
            height=""
          >
        </div>
        <div class="popup-details d-flex flex-column">
          <h2 class="popup-title"></h2>
          <div class="popup-price"></div>
          <div class="popup-description"></div>
        </div>
      </div>
      <div class="action-wrapper">
        <form class="popup-form-{{ section.id }}">
          <div class="popup-variants"></div>
          <button
            type="submit"
            class="add-to-cart"
            style="--bg-color: {{ section.settings.button_bg_color }}; --text-color: {{ section.settings.button_text_color }};"
          >
            <span class="loading"></span>
            <span class="button_text_wrapper">
              <span class="button-text">{{ section.settings.add_to_cart_text }}</span>
              <span class="button-svg">
                <svg width="28" height="13" viewBox="0 0 28 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M1.11108 5.74402L0.361084 5.74402L0.361084 7.24402L1.11108 7.24402L1.11108 5.74402ZM27.1487 7.02435C27.4416 6.73146 27.4416 6.25658 27.1487 5.96369L22.3757 1.19072C22.0828 0.897826 21.6079 0.897826 21.315 1.19072C21.0221 1.48361 21.0221 1.95849 21.315 2.25138L25.5577 6.49402L21.315 10.7367C21.0221 11.0296 21.0221 11.5044 21.315 11.7973C21.6079 12.0902 22.0828 12.0902 22.3757 11.7973L27.1487 7.02435ZM1.11108 7.24402L26.6183 7.24402L26.6183 5.74402L1.11108 5.74402L1.11108 7.24402Z" fill="{{ section.settings.button_text_color }}"/>
                </svg>
              </span>
            </span>
          </button>
          <div class="error-message"></div>
          <div class="success-message"></div>
        </form>
      </div>
    </div>
  </div>
</section>

<script>
  function initProductGridSection() {
    const products = [
      {% for block in section.blocks %}
        {% liquid assign product = block.settings.product %}
        {% if product != blank %}
          {
            id: {{ product.id }},
            title: {{ product.title | json }},
            handle: {{ product.handle | json }},
            price: {{ product.price | money | json }},
            description: {{ product.description | strip_html | truncatewords: 30 | json }},
            featured_image: {{ product.featured_image | image_url: width: 800 | json }},
            variants: {{ product.variants | json }},
            options: {{ product.options | json }},
            options_with_values: {{ product.options_with_values | json }},
          },
        {% else %}
          null,
        {% endif %}
      {% endfor %}
    ];

    const settings = {
      addToCartText: {{ section.settings.add_to_cart_text | json }},
      moneyFormat: {{ shop.money_format | json }}
    };

    const sectionId = '{{ section.id }}';
    const root = document.querySelector(`product-grid-section-${sectionId}`) || document;

    const dom = {
      productItems: root.querySelectorAll(`.product-item`),
      popup: root.querySelector(`.product-popup-${sectionId}`),
      popupContent: root.querySelector(`.popup-content`),
      closeButton: root.querySelector(`.popup-close`),
      popupImage: root.querySelector(`.popup-image`),
      popupTitle: root.querySelector(`.popup-title`),
      popupPrice: root.querySelector(`.popup-price`),
      popupDescription: root.querySelector(`.popup-description`),
      popupVariants: root.querySelector(`.popup-variants`),
      addToCartButton: root.querySelector(`.add-to-cart`),
      addToCartForm: root.querySelector(`.popup-form-${sectionId}`),
      loadingSpinner: root.querySelector(`.loading`),
      errorMessage: root.querySelector(`.error-message`),
      successMessage: root.querySelector(`.success-message`),
      buttonText: root.querySelector(`.button-text`),
    };

    let currentProductIndex = null;
    let currentVariants = {};

    function openPopup(index) {
      const product = products[index];
      if (!product) return;

      currentProductIndex = index;

      dom.popupImage.src = product.featured_image || '';
      dom.popupImage.alt = product.title;
      dom.popupTitle.textContent = product.title;
      dom.popupPrice.textContent = product.price;
      dom.popupDescription.textContent = product.description;
      dom.errorMessage.style.display = 'none';
      dom.successMessage.style.display = 'none';
      dom.buttonText.textContent = settings.addToCartText;
      dom.addToCartButton.disabled = false;

      showVariantSelectors(product);
      dom.popup.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    function closePopup() {
      dom.popup.classList.remove('active');
      document.body.style.overflow = '';
      currentProductIndex = null;
      currentVariants = {};
    }

    function showVariantSelectors(product) {
      dom.popupVariants.innerHTML = '';
      currentVariants = {};

      if (!product.options_with_values || product.options_with_values.length === 0 || product.variants.length <= 1) {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'id';
        input.id = `variant-id-${sectionId}`;
        input.value = product.variants[0].id;
        dom.popupVariants.appendChild(input);
        return;
      }

      product.options_with_values.forEach((option, index) => {
        const name = option.name;
        const values = [];

        product.variants.forEach(variant => {
          const val = variant[`option${index + 1}`];
          if (val && !values.includes(val)) values.push(val);
        });

        if (values.length > 0) {
          const selector = document.createElement('div');
          selector.className = `variant-selector`;

          const label = document.createElement('label');
          label.className = `variant-label`;
          label.textContent = name;
 

          const select = document.createElement('select');
          select.className = `variant-select`;
          select.name = `option${index + 1}`;
          select.dataset.optionIndex = index;

          values.forEach(val => {
            const opt = document.createElement('option');
            opt.value = val;
            opt.textContent = val;
            select.appendChild(opt);
          });

          {% comment %} select.addEventListener('change', updateVariant); {% endcomment %}

          selector.appendChild(label);
          selector.appendChild(select);
          dom.popupVariants.appendChild(selector);

          {% comment %} currentVariants[`option${index + 1}`] = values[0]; {% endcomment %}


          if (option.name.toLowerCase().includes('color')) {
            const custom_picker = document.createElement('div');
            custom_picker.className = `custom-variant-picker`;
            custom_picker.dataset.optionName = `option${index + 1}`;


            const custom_ui = document.createElement('div');
            custom_ui.className = `custom-picker-items`;
            
            values.forEach(val => {
              const li = document.createElement('div');
              li.dataset.value = val;
              li.textContent = val;
              const span = document.createElement('span');
              span.className = `color-swatch`;
              span.style.backgroundColor = val;
              li.appendChild(span);
              custom_ui.appendChild(li);
            });

            custom_picker.appendChild(custom_ui);
            selector.appendChild(custom_picker);  
            
            custom_ui.querySelectorAll('div').forEach(li => {
              li.addEventListener('click', () => {
                custom_ui.querySelectorAll('div').forEach(item => {
                  if (item !== li) item.classList.remove('active');
                });
                li.classList.add('active');
                select.value = li.dataset.value;
                select.dispatchEvent(new CustomEvent('customSelectChange', { detail: { value: li.dataset.value } }))
                currentVariants[`option${index + 1}`] = li.dataset.value;
                updateVariant();
              });
            });
          } else {
            const custom_select = document.createElement('div');
            custom_select.className = `custom-variant-select`;
            custom_select.dataset.optionName = `option${index + 1}`;


            const custom_select_btn = document.createElement('div');
            custom_select_btn.className = `custom-ul-button`;

            custom_select_btn.innerHTML = `<span class="custom-ui-text">Choose your size ${option.name}</span>
              <span class="custom-svg-wrapper"><svg width="16" height="10" viewBox="0 0 16 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M2 2L8 8L14 2" stroke="black" stroke-width="1.5" stroke-linecap="square"/>
              </svg></span>`;
            custom_select.appendChild(custom_select_btn);

            const custom_ui = document.createElement('ul');
            custom_ui.className = `custom-ui`;
            
            values.forEach(val => {
              const li = document.createElement('li');
              li.dataset.value = val;
              li.textContent = val;
              custom_ui.appendChild(li);
            });

            custom_select.appendChild(custom_ui);
            selector.appendChild(custom_select);  

            custom_select_btn.addEventListener('click', () => {
              custom_select.classList.toggle('active');
            });
            
            custom_ui.querySelectorAll('li').forEach(li => {
              li.addEventListener('click', () => {
                select.value = li.dataset.value;
                select.dispatchEvent(new CustomEvent('customSelectChange', { detail: { value: li.dataset.value } }))
                currentVariants[`option${index + 1}`] = li.dataset.value;
                updateVariant();
                custom_select.classList.remove('active');
                custom_select_btn.querySelector('.custom-ui-text').textContent = `${li.dataset.value}`;
              });
            });
            
            select.addEventListener('change', (e) => {
              console.log('Variant changed:', e.target.value,e);
              custom_select_btn.querySelector('.custom-ui-text').textContent = `${e.target.value}`;
            });
          }
          
        }
      });

      const hiddenInput = document.createElement('input');
      hiddenInput.type = 'hidden';
      hiddenInput.name = 'id';
      hiddenInput.id = `variant-id-${sectionId}`;
      const firstVariant = getSelectedVariant(products[currentProductIndex]);
      if (firstVariant) hiddenInput.value = firstVariant.id;
      dom.popupVariants.appendChild(hiddenInput);
    }

    function updateVariant() {
      const product = products[currentProductIndex];
      if (!product) return;

      console.log(currentVariants,"currentVariants")

      const selects = dom.popupVariants.querySelectorAll('select');
      selects.forEach((select, i) => {
        currentVariants[`option${i + 1}`] = select.value;
      }); 


      const selectValueSet = document.querySelectorAll('.variant-select');
      selectValueSet.forEach(select => {
        const optionKey = select.getAttribute('name');
        if (optionKey && currentVariants[optionKey]) {
          console.log(currentVariants[optionKey]);
          select.value = currentVariants[optionKey];
          const changeEvent = new Event('change', { bubbles: true });
          select.dispatchEvent(changeEvent);
        }
      });


      const variant = getSelectedVariant(product);
      const input = document.getElementById(`variant-id-${sectionId}`);

      dom.popupPrice.textContent = Shopify.formatMoney(variant.price,Shopify.money_format);
      input.value = variant.id;
      console.log('Selected variant:', product);
      dom.popupImage.src = variant?.featured_image?.src || product.featured_image;
      if (variant.available) {
        dom.addToCartButton.disabled = false;
        dom.buttonText.textContent = settings.addToCartText;
        input.value = '';
      } else {
        dom.addToCartButton.disabled = true;
        dom.buttonText.textContent = "Sold out";
        {% comment %} dom.popupPrice.textContent = 'Unavailable'; {% endcomment %}
      }
    }

    function getSelectedVariant(product) {
      return product.variants.find(variant =>
        product.options.every((option, i) =>
          variant[`option${i + 1}`] === currentVariants[`option${i + 1}`]
        )
      );
    }

    async function addToCart(e) {
      e.preventDefault();

      var thiscart = document.querySelector('cart-notification') || document.querySelector('cart-drawer');
      const product = products[currentProductIndex];
      if (!product) return;

      const variantInput = document.getElementById(`variant-id-${sectionId}`);
      const variantId = variantInput.value;

      if (!variantId) {
        dom.errorMessage.textContent = 'Please select a valid variant.';
        dom.errorMessage.style.display = 'block';
        return;
      }

      dom.addToCartButton.classList.add("loading-btn");
      dom.addToCartButton.disabled = true;
      dom.errorMessage.style.display = 'none';
      dom.successMessage.style.display = 'none';

      const items = [{ id: variantId, quantity: 1 }];
      const formData = new FormData();

      const body = {
        items: [{
          id: parseInt(variantId),
          quantity: 1
        }],
        sections: thiscart.getSectionsToRender().map((section) => section.id),
        sections_url: window.location.pathname
      };


      try {
        const res = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body:  JSON.stringify(body)
        });

        const data = await res.json();
        if (!res.ok) throw new Error(data.description || 'Error adding to cart');

        dom.addToCartButton.disabled = false;
        dom.addToCartButton.classList.remove("loading-btn");
        dom.buttonText.textContent = 'Added to cart!';
        dom.successMessage.textContent = 'Added to cart!';
        dom.successMessage.style.display = 'block';

        setTimeout(() => {
          dom.successMessage.style.display = 'none';
        }, 2000);

        closePopup();
        var cart = document.querySelector('cart-notification') || document.querySelector('cart-drawer');
        CartPerformance.measure("add:paint-updated-sections", () => {
          cart.renderContents(data);
        });

      } catch (error) {
        dom.addToCartButton.classList.remove("loading-btn");
        dom.errorMessage.textContent = error.message || 'Could not add to cart.';
        dom.errorMessage.style.display = 'block';
        dom.addToCartButton.disabled = false;
      }
    }

    function setupEvents() {
      dom.productItems.forEach((item, index) => {
        item.addEventListener('click', () => {
          const idx = parseInt(item.dataset.productIndex);
          if (products[idx]) openPopup(idx);
        });
      });

      dom.closeButton.addEventListener('click', closePopup);
      dom.popup.addEventListener('click', (e) => {
        if (e.target === dom.popup) closePopup();
      });

      dom.addToCartForm.addEventListener('submit', addToCart);
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') closePopup();
      });
    }

    setupEvents();
  }

  document.addEventListener('DOMContentLoaded', initProductGridSection);
</script>

{% schema %}
{
  "name": "Product Grid with Popup",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "label": "Columns on mobile",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "header",
      "content": "Popup Settings"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add to cart button text",
      "default": "Add to cart"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "button_bg_color",
      "label": "Button background",
      "default": "#000f9f"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Section Padding"
    },
    {
      "type": "range",
      "id": "section-padding-top",
      "label": "Section Padding Top",
      "step": 2,
      "min": 0,
      "max": 100,
      "default": 40,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "section-padding-bottom",
      "label": "Section Padding Bottom",
      "step": 2,
      "min": 0,
      "max": 100,
      "default": 40,
      "unit": "px"
    }
  ],
  "blocks": [
    {
      "type": "product_item",
      "name": "Product",
      "settings": [
        { "type": "product", "id": "product", "label": "Select Product" },
        { "type": "range", "id": "x-position", "label": "X Position", "default": 50, "step": 1, "min": 1, "max": 100 },
        { "type": "range", "id": "y-position", "label": "Y Position", "default": 50, "step": 1, "min": 1, "max": 100 }
      ]
    }
  ],
  "presets": [{ "name": "Product Grid with Popup" }]
}
{% endschema %}
